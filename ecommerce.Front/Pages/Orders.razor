@page "/orders"
@using MudBlazor
@using MudBlazor.Utilities
@using ecommerce.API.DTOs.Response.Order
@using ecommerce.Front.Components
@using ecommerce.Shared.DTOs.Response.Order
@using ecommerce.Front.Services
@using System.Linq
@using System.Reflection
@inject ISnackbar snackbar
@inject OrderAPI orderAPI
@inject IDialogService DialogService

<MudBreadcrumbs Items="_items" Separator=">" Style="color: #00796B;" />

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <MudText Typo="Typo.h6" Class="mb-4">Orders</MudText>
        <p>Below is all your orders.</p>
    </div>
    <div>
        <AddOrderButton OnOrderAdded="HandleOrderAdded" />
    </div>
</div>

<MudDataGrid @ref="_dataGrid" T="OrderResponseDTO"
             ServerData="@ServerReload"
             Hover FixedHeader Groupable="true"
             ReadOnly="@_isReadOnly"
             ExpandSingleRow="@_expandSingleRow">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Orders Details</MudText>
        <MudSpacer />
        <MudTextField AdornmentIcon="@Icons.Material.Outlined.Search" Adornment="Adornment.End" Placeholder="Order filter"
                      @bind-Value="_searchString" @bind-Value:after="@(() => _dataGrid.ReloadServerData())"
                      DebounceInterval="300" Variant="Variant.Outlined" Clearable />
    </ToolBarContent>
    <GroupTemplate>
        <span style="font-weight:bold">
            Pedido ID: @context.Grouping.Key - Data: @(((OrderResponseDTO)context.Grouping.First()).Date.ToShortDateString())
            <MudChip Size="Size.Small" Color="Color.Primary" Class="ml-2">
                Total Products: @(((OrderResponseDTO)context.Grouping.First()).OrderProducts.Count())
                - Total Price: @(((OrderResponseDTO)context.Grouping.First()).OrderProducts.Sum(op => op.TotalPrice)).ToString("C")
            </MudChip>
        </span>
    </GroupTemplate>
    <Columns>
        <HierarchyColumn T="OrderResponseDTO" EnableHeaderToggle="@_enableHeaderToggle" />
        <PropertyColumn Property="x => x.Date" Title="Order Date" Format="d" Sortable="true" />
        <PropertyColumn Property="x => x.OrderProducts.Sum(op => op.TotalPrice)" Title="Total Price Order" Format="C" Sortable="true" />

        <TemplateColumn T="OrderResponseDTO" Title="Actions">
            <CellTemplate Context="order">
                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem OnClick="@(() => DeleteOrder(order.Item))">
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-2" Color="Color.Error" /> Delete
                    </MudMenuItem>
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudTd>
            <MudDataGrid T="OrderProductSummaryDTO"
                         Items="@(((OrderResponseDTO)context.Item).OrderProducts)"
                         Groupable="true"
                         Dense="true" Bordered="true" FixedHeader="true" Width="100%">
                <GroupTemplate Context="orderProduct">
                    <span style="font-weight:bold">
                        Product ID: @orderProduct.Grouping.Key.ToString().Substring(0, 8)...
                        <MudChip Size="Size.Small" Color="Color.Secondary" Class="ml-2">
                            Total Quantity: @orderProduct.Grouping.Sum(p => p.Quantity)
                        </MudChip>
                    </span>
                </GroupTemplate>
                <Columns>
                    <PropertyColumn Property="op => op.ProductName" Title="Product" Groupable="true" />
                    <PropertyColumn Property="op => op.Quantity" Title="Quantity" />
                    <TemplateColumn Title="Unit Price">
                        <CellTemplate Context="productContext">
                            @(productContext.Item.Quantity != 0 ? (productContext.Item.TotalPrice / productContext.Item.Quantity).ToString("C") : "0")
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="op => op.TotalPrice" Title="Total Price" Format="C" />
                </Columns>
                <NoRecordsContent>
                    <MudText>Do not have products in this order.</MudText>
                </NoRecordsContent>
            </MudDataGrid>
        </MudTd>
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>No orders found.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading orders...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager T="OrderResponseDTO" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch T="bool" @bind-Value="_expandSingleRow" Label="Expand only one row at a time" Color="@Color.Primary" />
    <MudSwitch T="bool" @bind-Value="_enableHeaderToggle" Label="Enable expand button in header" Color="@Color.Primary" />
    <MudButton OnClick="@ExpandAllHierarchyAsync">
        Expand All Orders
    </MudButton>
    <MudButton OnClick="@CollapseAllHierarchyAsync">
        Retract All Orders
    </MudButton>
</div>

@code {
    private List<BreadcrumbItem> _items = new()
    {
        new("Home", href: "/"),
        new("Orders", href: "/orders")
    };
#nullable enable
    public static string __description__ = "Orders DataGrid with Nested Groupable Products Grid and Hierarchy Column";

    private MudDataGrid<OrderResponseDTO> _dataGrid = null!;
    private string? _searchString = string.Empty;
    private List<OrderResponseDTO> _orders = new();

    private bool _isReadOnly = true;
    private bool _expandSingleRow = false;
    private bool _enableHeaderToggle = false;
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        _isLoading = true;
        _orders = await orderAPI.GetOrdersAsync() ?? new();
        _isLoading = false;
    }

    private async Task HandleOrderAdded()
    {
        await _dataGrid.ReloadServerData();
        snackbar.Add("Order added successfully!", Severity.Success);
    }

    private async Task<GridData<OrderResponseDTO>> ServerReload(GridState<OrderResponseDTO> state)
    {
        await LoadOrdersAsync();

        var query = _orders.AsEnumerable();

        query = query.Where(x => MatchesSearch(x, _searchString));

        if (state.SortDefinitions.Any())
        {
            IOrderedEnumerable<OrderResponseDTO>? orderedQuery = null;
            foreach (var sort in state.SortDefinitions)
            {
                if (orderedQuery == null)
                {
                    orderedQuery = sort.Descending
                        ? query.OrderByDescending(obj => GetPropertyValue(obj, sort.SortBy.ToString()))
                        : query.OrderBy(obj => GetPropertyValue(obj, sort.SortBy.ToString()));
                }
                else
                {
                    orderedQuery = sort.Descending
                        ? orderedQuery.ThenByDescending(obj => GetPropertyValue(obj, sort.SortBy.ToString()))
                        : orderedQuery.ThenBy(obj => GetPropertyValue(obj, sort.SortBy.ToString()));
                }
            }
            query = orderedQuery!;
        }

        var totalItems = query.Count();
        var pagedData = query.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new()
        {
            TotalItems = totalItems,
            Items = pagedData
        };
    }

    private bool MatchesSearch(OrderResponseDTO order, string? searchString)
    {
        if (string.IsNullOrEmpty(searchString))
        {
            return true;
        }

        return order.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               order.UserId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               order.Date.ToShortDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               order.OrderProducts.Any(op => op.ProductId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                             op.Quantity.ToString().Contains(searchString) ||
                                             op.TotalPrice.ToString().Contains(searchString));
    }

    private static object? GetPropertyValue<T>(T obj, string propertyName)
    {
        if (propertyName.Contains("OrderProducts.Sum(op => op.TotalPrice)"))
        {
            if (obj is OrderResponseDTO order)
            {
                return order.OrderProducts.Sum(op => op.TotalPrice);
            }
        }

        propertyName = propertyName.Replace("x => ", "").Replace("op => ", "");

        var parts = propertyName.Split('.');
        object? currentObject = obj;

        foreach (var part in parts)
        {
            if (currentObject == null) return null;

            var actualPart = part.Contains("(") ? part.Substring(0, part.IndexOf('(')) : part;

            PropertyInfo? property = currentObject.GetType().GetProperty(actualPart);
            if (property == null)
            {
                FieldInfo? field = currentObject.GetType().GetField(actualPart);
                if (field != null)
                {
                    currentObject = field.GetValue(currentObject);
                }
                else
                {
                    return null;
                }
            }
            else
            {
                currentObject = property.GetValue(currentObject);
            }
        }
        return currentObject;
    }

    private async Task DeleteOrder(OrderResponseDTO order)
    {
        var parameters = new DialogParameters
        {
            { nameof(DeleteOrderDialog.ItemName), $"{order.Id}"}
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<DeleteOrderDialog>("Delete Order", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var success = await orderAPI.DeleteOrderAsync(order.Id);

            if (success)
            {
                await _dataGrid.ReloadServerData();
                snackbar.Add("Order deleted succesfully!", Severity.Success);
            }
            else
            {
                snackbar.Add("Error deleting order.", Severity.Error);
            }
        }
    }

    private Task ExpandAllHierarchyAsync()
    {
        return _dataGrid.ExpandAllHierarchy();
    }

    private Task CollapseAllHierarchyAsync()
    {
        return _dataGrid.CollapseAllHierarchy();
    }

    private Task ExpandAllMainGridGroupsAsync()
    {
        return _dataGrid.ExpandAllGroupsAsync();
    }

    private Task CollapseAllMainGridGroupsAsync()
    {
        return _dataGrid.CollapseAllGroupsAsync();
    }
}
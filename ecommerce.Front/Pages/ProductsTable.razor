@using System.Text.Json
@using ecommerce.API.DTOs.Response.Product
@inject HttpClient Http

<MudDataGrid Items="products" Hover="true" Dense="true" FixedHeader="true" Loading="@isLoading">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Product" />
        <PropertyColumn Property="x => x.UnitPrice" Title="Unit Price" />
        <PropertyColumn Property="x => x.Stock.Quantity" Title="Stock" />
        <PropertyColumn Property="x => x.Description" Title="Description" />
    </Columns>
</MudDataGrid>

@code {
    private List<ProductResponseDTO>? products;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("api/Product");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                products = JsonSerializer.Deserialize<List<ProductResponseDTO>>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro HTTP: {(int)response.StatusCode} - {response.ReasonPhrase}");
                Console.WriteLine($"Conteúdo do erro: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar produtos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
